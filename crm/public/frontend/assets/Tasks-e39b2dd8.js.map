{"version":3,"file":"Tasks-e39b2dd8.js","sources":["../../../../frontend/src/components/ListViews/TasksListView.vue","../../../../frontend/src/pages/Tasks.vue"],"sourcesContent":["<template>\n  <ListView\n    :columns=\"columns\"\n    :rows=\"rows\"\n    :options=\"{\n      onRowClick: (row) => emit('showTask', row.name),\n      selectable: options.selectable,\n      showTooltip: options.showTooltip,\n      resizeColumn: options.resizeColumn,\n    }\"\n    row-key=\"name\"\n  >\n    <ListHeader class=\"mx-5\" @columnWidthUpdated=\"emit('columnWidthUpdated')\" />\n    <ListRows id=\"list-rows\">\n      <ListRow\n        class=\"mx-5\"\n        v-for=\"row in rows\"\n        :key=\"row.name\"\n        v-slot=\"{ idx, column, item }\"\n        :row=\"row\"\n      >\n        <div v-if=\"column.key === 'due_date' || column.key === 'remind_task'\">\n          <Tooltip :text=\"dateFormat(item, 'ddd, MMM D, YYYY | hh:mm a')\">\n            <div class=\"flex items-center gap-2 truncate text-base\">\n              <CalendarIcon />\n              <div v-if=\"item\" class=\"truncate\">\n                {{ dateFormat(item, 'D MMM, hh:mm a') }}\n              </div>\n            </div>\n          </Tooltip>\n        </div>\n        <ListRowItem v-else :item=\"item\">\n          <template #prefix>\n            <div v-if=\"column.key === 'status'\">\n              <TaskStatusIcon :status=\"item\" />\n            </div>\n            <div v-else-if=\"column.key === 'priority'\">\n              <TaskPriorityIcon :priority=\"item\" />\n            </div>\n            <div v-else-if=\"column.key === 'assigned_to'\">\n              <Avatar\n                v-if=\"item.full_name\"\n                class=\"flex items-center\"\n                :image=\"item.user_image\"\n                :label=\"item.full_name\"\n                size=\"sm\"\n              />\n            </div>\n          </template>\n          <template #default=\"{ label }\">\n            <div\n              v-if=\"['modified', 'creation'].includes(column.key)\"\n              class=\"truncate text-base\"\n              @click=\"\n                (event) => emit('applyFilter', { event, idx, column, item })\n              \"\n            >\n              <Tooltip :text=\"item.label\">\n                <div>{{ item.timeAgo }}</div>\n              </Tooltip>\n            </div>\n            <div v-else-if=\"column.type === 'Check'\">\n              <FormControl\n                type=\"checkbox\"\n                :modelValue=\"item\"\n                :disabled=\"true\"\n                class=\"text-gray-900\"\n              />\n            </div>\n            <div\n              v-else\n              class=\"truncate text-base\"\n              @click=\"\n                (event) => emit('applyFilter', { event, idx, column, item })\n              \"\n            >\n            {{ __(label) }}\n            </div>\n          </template>\n        </ListRowItem>\n      </ListRow>\n    </ListRows>\n    <ListSelectBanner>\n      <template #actions=\"{ selections, unselectAll }\">\n        <Dropdown :options=\"bulkActions(selections, unselectAll)\">\n          <Button icon=\"more-horizontal\" variant=\"ghost\" />\n        </Dropdown>\n      </template>\n    </ListSelectBanner>\n  </ListView>\n  <ListFooter\n    class=\"border-t px-5 py-2\"\n    v-model=\"pageLengthCount\"\n    :options=\"{\n      rowCount: options.rowCount,\n      totalCount: options.totalCount,\n    }\"\n    @loadMore=\"emit('loadMore')\"\n  />\n  <EditValueModal\n    v-model=\"showEditModal\"\n    v-model:unselectAll=\"unselectAllAction\"\n    doctype=\"CRM Task\"\n    :selectedValues=\"selectedValues\"\n    @reload=\"list.reload()\"\n  />\n</template>\n<script setup>\nimport TaskStatusIcon from '@/components/Icons/TaskStatusIcon.vue'\nimport TaskPriorityIcon from '@/components/Icons/TaskPriorityIcon.vue'\nimport CalendarIcon from '@/components/Icons/CalendarIcon.vue'\nimport EditValueModal from '@/components/Modals/EditValueModal.vue'\nimport { dateFormat } from '@/utils'\nimport { globalStore } from '@/stores/global'\nimport { setupListActions, createToast } from '@/utils'\nimport {\n  Avatar,\n  ListView,\n  ListHeader,\n  ListRows,\n  ListRow,\n  ListSelectBanner,\n  ListRowItem,\n  ListFooter,\n  Dropdown,\n  call,\n  Tooltip,\n} from 'frappe-ui'\nimport { ref, watch, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\n\nconst props = defineProps({\n  rows: {\n    type: Array,\n    required: true,\n  },\n  columns: {\n    type: Array,\n    required: true,\n  },\n  options: {\n    type: Object,\n    default: () => ({\n      selectable: true,\n      showTooltip: true,\n      resizeColumn: false,\n      totalCount: 0,\n      rowCount: 0,\n    }),\n  },\n})\n\nconst emit = defineEmits([\n  'loadMore',\n  'updatePageCount',\n  'showTask',\n  'columnWidthUpdated',\n  'applyFilter',\n])\n\nconst pageLengthCount = defineModel()\nconst list = defineModel('list')\n\nconst router = useRouter()\n\nconst { $dialog } = globalStore()\n\nwatch(pageLengthCount, (val, old_value) => {\n  if (val === old_value) return\n  emit('updatePageCount', val)\n})\n\nconst showEditModal = ref(false)\nconst selectedValues = ref([])\nconst unselectAllAction = ref(() => {})\n\nfunction editValues(selections, unselectAll) {\n  selectedValues.value = selections\n  showEditModal.value = true\n  unselectAllAction.value = unselectAll\n}\n\nfunction deleteValues(selections, unselectAll) {\n  $dialog({\n    title: __('Delete'),\n    message: __('Are you sure you want to delete {0} item(s)?', [\n      selections.size,\n    ]),\n    variant: 'danger',\n    actions: [\n      {\n        label: __('Delete'),\n        variant: 'solid',\n        theme: 'red',\n        onClick: (close) => {\n          call('frappe.desk.reportview.delete_items', {\n            items: JSON.stringify(Array.from(selections)),\n            doctype: 'CRM Task',\n          }).then(() => {\n            createToast({\n              title: __('Deleted successfully'),\n              icon: 'check',\n              iconClasses: 'text-green-600',\n            })\n            unselectAll()\n            list.value.reload()\n            close()\n          })\n        },\n      },\n    ],\n  })\n}\n\nconst customListActions = ref([])\n\nfunction bulkActions(selections, unselectAll) {\n  let actions = [\n    {\n      label: __('Edit'),\n      onClick: () => editValues(selections, unselectAll),\n    },\n    {\n      label: __('Delete'),\n      onClick: () => deleteValues(selections, unselectAll),\n    },\n  ]\n  return actions\n}\n\nonMounted(() => {\n  if (!list.value?.data) return\n  setupListActions(list.value.data, {\n    list: list.value,\n    call,\n    createToast,\n    $dialog,\n    router,\n  })\n  // customBulkActions.value = list.value?.data?.bulkActions || []\n  customListActions.value = list.value?.data?.listActions || []\n})\n\ndefineExpose({\n  customListActions,\n})\n</script>\n","<template>\n  <LayoutHeader>\n    <template #left-header>\n      <Breadcrumbs :items=\"breadcrumbs\" />\n    </template>\n    <template #right-header>\n      <CustomActions\n        v-if=\"tasksListView?.customListActions\"\n        :actions=\"tasksListView.customListActions\"\n      />\n      <Button variant=\"solid\" :label=\"__('Create')\" @click=\"createTask\">\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </template>\n  </LayoutHeader>\n  <ViewControls\n    ref=\"viewControls\"\n    v-model=\"tasks\"\n    v-model:loadMore=\"loadMore\"\n    v-model:resizeColumn=\"triggerResize\"\n    v-model:updatedPageCount=\"updatedPageCount\"\n    doctype=\"CRM Task\"\n    :showElement=true\n    :showFuncImport=false\n    :showFuncConvertTaskCustomer=\"showConvertTaskCustomer\"\n    :placeholderText=\"__('Search task')\"\n    @afterConvertTaskCustomer=\"onAfterConvertTaskCustomer()\"\n  />\n  <TasksListView\n    ref=\"tasksListView\"\n    v-if=\"tasks.data && rows.length\"\n    v-model=\"tasks.data.page_length_count\"\n    v-model:list=\"tasks\"\n    :rows=\"rows\"\n    :columns=\"tasks.data.columns\"\n    :options=\"{\n      showTooltip: false,\n      resizeColumn: true,\n      rowCount: tasks.data.row_count,\n      totalCount: tasks.data.total_count,\n    }\"\n    @loadMore=\"() => loadMore++\"\n    @columnWidthUpdated=\"() => triggerResize++\"\n    @updatePageCount=\"(count) => (updatedPageCount = count)\"\n    @showTask=\"showTask\"\n    @applyFilter=\"(data) => viewControls.applyFilter(data)\"\n  />\n  <div v-else-if=\"tasks.data\" class=\"flex h-full items-center justify-center\">\n    <div\n      class=\"flex flex-col items-center gap-3 text-xl font-medium text-gray-500\"\n    >\n      <EmailIcon class=\"h-10 w-10\" />\n      <span>{{ __('No {0} Found', [__('Tasks')]) }}</span>\n      <Button :label=\"__('Create')\" @click=\"showTaskModal = true\">\n        <template #prefix><FeatherIcon name=\"plus\" class=\"h-4\" /></template>\n      </Button>\n    </div>\n  </div>\n  <TaskModal v-model=\"showTaskModal\" v-model:reloadTasks=\"tasks\" :task=\"task\" />\n</template>\n\n<script setup>\nimport CustomActions from '@/components/CustomActions.vue'\nimport EmailIcon from '@/components/Icons/EmailIcon.vue'\nimport LayoutHeader from '@/components/LayoutHeader.vue'\nimport ViewControls from '@/components/ViewControls.vue'\nimport TasksListView from '@/components/ListViews/TasksListView.vue'\nimport TaskModal from '@/components/Modals/TaskModal.vue'\nimport { usersStore } from '@/stores/users'\nimport { dateFormat, dateTooltipFormat, timeAgo } from '@/utils'\nimport { Breadcrumbs } from 'frappe-ui'\nimport { computed, ref, onMounted } from 'vue'\nimport { sessionStore } from '@/stores/session'\n\nconst breadcrumbs = [{ label: __('Tasks'), route: { name: 'Tasks' } }]\n\nconst { getUser } = usersStore()\nconst { roles } = sessionStore()\n\nconst tasksListView = ref(null)\nconst showConvertTaskCustomer = ref(false)\n\nonMounted(()=>{\n  let arrRole = roles.data;\n  for(let i = 0; i < arrRole.length; i++){\n    if(arrRole[i] == \"System Manager\"){\n      showConvertTaskCustomer.value = true;\n      break;\n    }\n  }\n})\n\n// tasks data is loaded in the ViewControls component\nconst tasks = ref({})\nconst loadMore = ref(1)\nconst triggerResize = ref(1)\nconst updatedPageCount = ref(20)\nconst viewControls = ref(null)\n\nconst rows = computed(() => {\n  if (!tasks.value?.data?.data) return []\n  return tasks.value?.data.data.map((task) => {\n    let _rows = {}\n    tasks.value?.data.rows.forEach((row) => {\n      _rows[row] = task[row]\n\n      if (['modified', 'creation'].includes(row)) {\n        _rows[row] = {\n          label: dateFormat(task[row], dateTooltipFormat),\n          timeAgo: __(timeAgo(task[row])),\n        }\n      } else if (row == 'assigned_to') {\n        _rows[row] = {\n          label: task.assigned_to && getUser(task.assigned_to).full_name,\n          ...(task.assigned_to && getUser(task.assigned_to)),\n        }\n      }\n    })\n    return _rows\n  })\n})\n\nconst showTaskModal = ref(false)\n\nconst task = ref({\n  name: '',\n  title: '',\n  description: '',\n  assigned_to: '',\n  due_date: '',\n  remind_task: '',\n  status: 'Backlog',\n  priority: 'Low',\n  reference_doctype: 'CRM Lead',\n  reference_docname: ''\n})\n\nfunction showTask(name) {\n  let t = rows.value?.find((row) => row.name === name)\n  task.value = {\n    name: t.name,\n    title: t.title,\n    description: t.description,\n    assigned_to: t.assigned_to?.email || '',\n    due_date: t.due_date,\n    remind_task: t.remind_task,\n    status: t.status,\n    priority: t.priority,\n    reference_doctype: t.reference_doctype,\n    reference_docname: t.reference_docname,\n  }\n  showTaskModal.value = true\n}\n\nfunction createTask() {\n  task.value = {\n    name: '',\n    title: '',\n    description: '',\n    assigned_to: '',\n    due_date: '',\n    remind_task: '',\n    status: 'Backlog',\n    priority: 'Low',\n    reference_doctype: 'CRM Lead',\n    reference_docname: '',\n  }\n  showTaskModal.value = true\n}\n\nfunction onAfterConvertTaskCustomer(){\n  tasks.value.reload();\n}\n</script>\n"],"names":["emit","__emit","pageLengthCount","_useModel","__props","list","router","useRouter","$dialog","globalStore","watch","val","old_value","showEditModal","ref","selectedValues","unselectAllAction","editValues","selections","unselectAll","deleteValues","close","call","createToast","customListActions","bulkActions","onMounted","_a","setupListActions","_c","_b","__expose","breadcrumbs","getUser","usersStore","roles","sessionStore","tasksListView","showConvertTaskCustomer","arrRole","i","tasks","loadMore","triggerResize","updatedPageCount","viewControls","rows","computed","task","_rows","row","dateFormat","dateTooltipFormat","timeAgo","showTaskModal","showTask","name","t","createTask","onAfterConvertTaskCustomer"],"mappings":"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"}